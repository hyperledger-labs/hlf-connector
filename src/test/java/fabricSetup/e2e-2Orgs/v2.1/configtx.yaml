

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
  # Channel capabilities apply to both the orderers and the peers and must be
  # supported by both.  Set the value of the capability to true to require it.
  Channel: &ChannelCapabilities
    # V1.1 for Channel is a catchall flag for behavior which has been
    # determined to be desired for all orderers and peers running v1.0.x,
    # but the modification of which would cause incompatibilities.  Users
    # should leave this flag set to true.
    V1_3: true

  # Orderer capabilities apply only to the orderers, and may be safely
  # manipulated without concern for upgrading peers.  Set the value of the
  # capability to true to require it.
  Orderer: &OrdererCapabilities
    # V1.1 for Order is a catchall flag for behavior which has been
    # determined to be desired for all orderers running v1.0.x, but the
    # modification of which  would cause incompatibilities.  Users should
    # leave this flag set to true.
    V1_1: true

  # Application capabilities apply only to the peer network, and may be
  # safely manipulated without concern for upgrading orderers.  Set the value
  # of the capability to true to require it.
  Application: &ApplicationCapabilities
    # V1.1 for Application is a catchall flag for behavior which has been
    # determined to be desired for all peers running v1.0.x, but the
    # modification of which would cause incompatibilities.  Users should
    # leave this flag set to true.
    V1_1: true
    # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
    # private data capability.  It is only supported when using peers built
    # with experimental build tag.  When set to true, private data
    # collections can be configured upon chaincode instantiation and
    # utilized within chaincode Invokes.
    # NOTE: Use of this feature with non "experimental" binaries on the
    # network may cause a fork.
    # V1_1_PVTDATA_EXPERIMENTAL: false
    # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
    # the resources capability. Currently this is needed for defining
    # resource-based access control (RBAC). RBAC helps set fine-grained
    # access control on system resources such as the endorser and various
    # system chaincodes. Default is v1.0-based access control based on
    # CHANNEL_READERS and CHANNEL_WRITERS.
    # NOTE: Use of this feature with non "experimental" binaries on
    # the network may cause a fork.
    # V1_1_RESOURCETREE_EXPERIMENTAL: false

    # Application capabilities apply only to the peer network, and may be
    # safely manipulated without concern for upgrading orderers.  Set the value
    # of the capability to true to require it.

  Application1_2: &ApplicationCapabilities1_2
    # V1.1 for Application is a catchall flag for behavior which has been
    # determined to be desired for all peers running v1.0.x, but the
    # modification of which would cause incompatibilities.  Users should
    # leave this flag set to true.
    V1_2: true
    # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
    # private data capability.  It is only supported when using peers built
    # with experimental build tag.  When set to true, private data
    # collections can be configured upon chaincode instantiation and
    # utilized within chaincode Invokes.
    # NOTE: Use of this feature with non "experimental" binaries on the
    # network may cause a fork.
    # V1_1_PVTDATA_EXPERIMENTAL: true
    # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
    # the resources capability. Currently this is needed for defining
    # resource-based access control (RBAC). RBAC helps set fine-grained
    # access control on system resources such as the endorser and various
    # system chaincodes. Default is v1.0-based access control based on
    # CHANNEL_READERS and CHANNEL_WRITERS.
    # NOTE: Use of this feature with non "experimental" binaries on
    # the network may cause a fork.
    # V1_1_RESOURCETREE_EXPERIMENTAL: true

  Application1_3: &ApplicationCapabilities1_3
    # V1.1 for Application is a catchall flag for behavior which has been
    # determined to be desired for all peers running v1.0.x, but the
    # modification of which would cause incompatibilities.  Users should
    # leave this flag set to true.
    V1_3: true
    # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
    # private data capability.  It is only supported when using peers built
    # with experimental build tag.  When set to true, private data
    # collections can be configured upon chaincode instantiation and
    # utilized within chaincode Invokes.
    # NOTE: Use of this feature with non "experimental" binaries on the
    # network may cause a fork.
    # V1_1_PVTDATA_EXPERIMENTAL: true
    # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
    # the resources capability. Currently this is needed for defining
    # resource-based access control (RBAC). RBAC helps set fine-grained
    # access control on system resources such as the endorser and various
    # system chaincodes. Default is v1.0-based access control based on
    # CHANNEL_READERS and CHANNEL_WRITERS.
    # NOTE: Use of this feature with non "experimental" binaries on
    # the network may cause a fork.
    # V1_1_RESOURCETREE_EXPERIMENTAL: true

  Application2_0: &ApplicationCapabilities2_0
    # V1.1 for Application is a catchall flag for behavior which has been
    # determined to be desired for all peers running v1.0.x, but the
    # modification of which would cause incompatibilities.  Users should
    # leave this flag set to true.
    V2_0: true
    # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
    # private data capability.  It is only supported when using peers built
    # with experimental build tag.  When set to true, private data
    # collections can be configured upon chaincode instantiation and
    # utilized within chaincode Invokes.
    # NOTE: Use of this feature with non "experimental" binaries on the
    # network may cause a fork.
    # V1_1_PVTDATA_EXPERIMENTAL: true
    # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
    # the resources capability. Currently this is needed for defining
    # resource-based access control (RBAC). RBAC helps set fine-grained
    # access control on system resources such as the endorser and various
    # system chaincodes. Default is v1.0-based access control based on
    # CHANNEL_READERS and CHANNEL_WRITERS.
    # NOTE: Use of this feature with non "experimental" binaries on
    # the network may cause a fork.
    # V1_1_RESOURCETREE_EXPERIMENTAL: true


################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
Organizations:

  # SampleOrg defines an MSP using the sampleconfig.  It should never be used
  # in production but may be used as a template for other definitions
  - &OrdererOrg
    # DefaultOrg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    Name: OrdererOrg

    # SkipAsForeign can be set to true for org definitions which are to be
    # inherited from the orderer system channel during channel creation.  This
    # is especially useful when an admin of a single org without access to the
    # MSP directories of the other orgs wishes to create a channel.  Note
    # this property must always be set to false for orgs included in block
    # creation.
    SkipAsForeign: false

    # ID to load the MSP definition as
    ID: OrdererMSP

    # MSPDir is the filesystem path which contains the MSP configuration
    MSPDir: crypto-config/ordererOrganizations/example.com/msp


    # AdminPrincipal: Role.ADMIN

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies: &OrdererOrgPolicies
      Readers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: "OR('OrdererMSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
    # AnchorPeers defines the location of peers which can be used for
    # cross-org gossip communication. Note, this value is only encoded in
    # the genesis block in the Application section context.
    AnchorPeers:
      - Host: peer0.org1.example.com
        Port: 7051

  #        # AdminPrincipal dictates the type of principal used for an
  #                # organization's Admins policy. Today, only the values of Role.ADMIN and
  #                # Role.MEMBER are accepted, which indicates a principal of role type
  #                # ADMIN and role type MEMBER respectively.
  #       # AdminPrincipal: Role.ADMIN

  - &Org1
    # DefaultOrg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    Name: Org1MSP

    # ID to load the MSP definition as
    ID: Org1MSP

    MSPDir: crypto-config/peerOrganizations/org1.example.com/msp

    # AdminPrincipal: Role.ADMIN

    AnchorPeers:
      # AnchorPeers defines the location of peers which can be used
      # for cross org gossip communication.  Note, this value is only
      # encoded in the genesis block in the Application section context
      - Host: peer0.org1.example.com
        Port: 7051

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies: &Org1Policies
      Readers:
        Type: Signature
        Rule: "OR('Org1MSP.member', 'idemixMSPID1.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org1MSP.member', 'idemixMSPID1.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org1MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org1MSP.member')"



  - &Org2
    # defaultorg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    Name: Org2MSP

    # id to load the msp definition as
    ID: Org2MSP

    MSPDir: crypto-config/peerOrganizations/org2.example.com/msp

    # AdminPrincipal: Role.ADMIN

    anchorpeers:
      # anchorpeers defines the location of peers which can be used
      # for cross org gossip communication.  note, this value is only
      # encoded in the genesis block in the application section context
      - host: peer0.org2.example.com
        port: 8051

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org2MSP.member','idemixMSPID2.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org2MSP.member','idemixMSPID2.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org2MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org2MSP.member')"

  - &Org1Idemix
    # defaultorg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    name: idemixMSP1

    # id to load the msp definition as
    id: idemixMSPID1

    msptype: idemix
    mspdir: crypto-config/peerOrganizations/org3.example.com


    Policies:
      Readers:
        Type: Signature
        Rule: "OR('idemixMSP1.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: "OR('idemixMSP1.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: "OR('idemixMSP1.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('idemixMSP1.member')"


  - &Org2Idemix
    # defaultorg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    name: idemixMSP2

    # id to load the msp definition as
    id: idemixMSPID2

    msptype: idemix
    mspdir: crypto-config/peerOrganizations/org4.example.com

    Policies:
      Readers:
        Type: Signature
        Rule: "OR('idemixMSPID2.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: "OR('idemixMSPID2.member')"
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: "OR('idemixMSPID2.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('idemixMSPID2.member')"






################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
#Application: &ApplicationDefaults
#
#    # Organizations lists the orgs participating on the application side of the
#    # network.
#    Organizations:

Application: &ApplicationDefaults
  ACLs: &ACLsDefault
    # This section provides defaults for policies for various resources
    # in the system. These "resources" could be functions on system chaincodes
    # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
    # (e.g.,who can receive Block events). This section does NOT specify the resource's
    # definition or API, but just the ACL policy for it.
    #
    # User's can override these defaults with their own policy mapping by defining the
    # mapping under ACLs in their channel definition

    #---New Lifecycle System Chaincode (_lifecycle) function to policy mapping for access control--#

    # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
    _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

    # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
    _lifecycle/QueryChaincodeDefinition: /Channel/Application/Readers

    # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
    _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Readers

    #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetConfigTree" function
    cscc/GetConfigTree: /Channel/Application/Readers

    # ACL policy for cscc's "SimulateConfigTreeUpdate" function
    cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

    #---Miscellanesous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Readers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

  # Organizations lists the orgs participating on the application side of the
  # network.
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  #   /Channel/Application/<PolicyName>
  Policies: &ApplicationDefaultPolicies
    LifecycleEndorsement:
      # Type: ImplicitMeta
      # Rule: "MAJORITY Endorsement"
      Type: Signature
      Rule: "AND('Org1MSP.member', 'Org2MSP.member')"
    Endorsement:
      #            Type: ImplicitMeta
      #            Rule: "MAJORITY Endorsement"
      Type: Signature
      Rule: "AND('Org1MSP.member', 'Org2MSP.member')"
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: Signature
      Rule: "AND('Org1MSP.member', 'Org2MSP.member')"
      # Rule: "MAJORITY Admins"




#Readers:
#    Type: Signature
#    Rule: "OR('idemixMSP1.member')"
#    # If your MSP is configured with the new NodeOUs, you might
#    # want to use a more specific rule like the following:
#    # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
#    Writers:
#        Type: Signature
#        Rule: "OR('idemixMSP1.member')"
#        # If your MSP is configured with the new NodeOUs, you might
#        # want to use a more specific rule like the following:
#        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
#    Admins:
#        Type: Signature
#        Rule: "OR('idemixMSP1.admin')"
#    Endorsement:
#        Type: Signature
#        Rule: "OR('idemixMSP1.member')"



################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults

  # Orderer Type: The orderer implementation to start.
  # Available types are "solo" and "kafka".
  OrdererType: solo

  Addresses:
    - orderer.example.com:7050

  # Batch Timeout: The amount of time to wait before creating a batch.
  BatchTimeout: 2s

  # Batch Size: Controls the number of messages batched into a block.
  BatchSize:

    # Max Message Count: The maximum number of messages to permit in a
    # batch.
    MaxMessageCount: 10

    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch. If the "kafka" OrdererType is
    # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
    # the Kafka brokers to a value that is larger than this one.
    AbsoluteMaxBytes: 10 MB

    # Preferred Max Bytes: The preferred maximum number of bytes allowed
    # for the serialized messages in a batch. A message larger than the
    # preferred max bytes will result in a batch larger than preferred max
    # bytes.
    PreferredMaxBytes: 512 KB

  # Max Channels is the maximum number of channels to allow on the ordering
  # network. When set to 0, this implies no maximum number of channels.
  MaxChannels: 0

  #    Kafka:
  #        # Brokers: A list of Kafka brokers to which the orderer connects. Edit
  #        # this list to identify the brokers of the ordering service.
  #        # NOTE: Use IP:port notation.
  #        Brokers:
  #            - kafka0:9092
  #            - kafka1:9092
  #            - kafka2:9092

  # Organizations lists the orgs participating on the orderer side of the
  # network.
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Orderer policies, their canonical path is
  #   /Channel/Orderer/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    #            Type: Signature
    #            Rule: "AND('Org1MSP.admin', 'Org2MSP.admin')"

    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"
  # Capabilities describes the orderer level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *OrdererCapabilities

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
  # Policies defines the set of policies at this level of the config tree
  # For Channel policies, their canonical path is
  #   /Channel/<PolicyName>
  Policies:
    # Who may invoke the 'Deliver' API
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    # Who may invoke the 'Broadcast' API
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    # By default, who may modify elements at this config level
    Admins:
      Type: Signature
      Rule: "AND('Org1MSP.admin', 'Org2MSP.admin')"
#            Type: ImplicitMeta
#            Rule: "MAJORITY Admins"


################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

  TwoOrgsOrdererGenesis:
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2

  TwoOrgsChannel:
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2

  ################################################################################
  #
  #   Profile for v1.1 capabilities
  #
  #   - Different configuration profiles may be encoded here to be specified
  #   as parameters to the configtxgen tool
  #
  ################################################################################


  TwoOrgsOrdererGenesis_v11:
    Capabilities:
      <<: *ChannelCapabilities
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *OrdererCapabilities
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2

  TwoOrgsChannel_v11:
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
      Capabilities:
        <<: *ApplicationCapabilities

  ###############################################################################
  #   Profile for v1.2 capabilities
  #
  #   - Different configuration profiles may be encoded here to be specified
  #   as parameters to the configtxgen tool
  #
  ################################################################################

  TwoOrgsOrdererGenesis_v12:
    Capabilities:
      <<: *ChannelCapabilities
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *OrdererCapabilities
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *ApplicationCapabilities1_2

  TwoOrgsChannel_v12:
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
      Capabilities:
        <<: *ApplicationCapabilities1_2

  ################################################################################
  #
  #   Profile for v1.3 capabilities
  #
  #   - Different configuration profiles may be encoded here to be specified
  #   as parameters to the configtxgen tool
  #
  ################################################################################


  TwoOrgsOrdererGenesis_v13:
    Capabilities:
      <<: *ChannelCapabilities
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *OrdererCapabilities
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2
          - *Org1Idemix
          - *Org2Idemix
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *ApplicationCapabilities1_3


  TwoOrgsChannel_v13:
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
        - *Org1Idemix
        - *Org2Idemix
      Capabilities:
        <<: *ApplicationCapabilities1_3


  TwoOrgsOrdererGenesis_v20:
    <<: *ChannelDefaults
    Capabilities:
      <<: *ChannelCapabilities
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - <<: *OrdererOrg
          Policies:
            <<: *OrdererOrgPolicies
            Admins:
              Type: Signature
              Rule: "OR('OrdererMSP.member')"
      Capabilities:
        <<: *OrdererCapabilities
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *OrdererOrg
      Capabilities:
        <<: *ApplicationCapabilities2_0
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2
          - *Org1Idemix
          - *Org2Idemix




  TwoOrgsChannel_v20:
    <<: *ChannelDefaults
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
      Capabilities:
        <<: *ApplicationCapabilities2_0

